install.packages("lsr")
install.packages("moments")
clc
clear
rm
library(lsr)
library(moments)
rm(list=ls()) #clear variables in workspace
#create vector of data
edad <- c(18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 20, 20, 20, 20, 20, 20, 20,
20, 20, 20, 20, 20, 20, 20, 21, 21, 21,
21, 21, 21, 21, 21, 22, 22, 22, 23, 23,
24, 26, 31, 37)
mean(edad)
median(edad)
modeOf(edad)
maxFreq(edad)
median(156, 158)
peso <- c(46, 52, 52, 52, 54, 55, 56, 58, 58, 58, 58,
58, 59, 60, 60, 60, 62, 64, 65, 65, 65, 65,
66, 67, 67, 68, 68, 69, 70, 70, 70, 70, 71,
72, 74, 77, 80, 80, 80, 81, 85, 88, 91, 120)
library(lsr)
library(moments)
rm(list=ls()) #clear variables in workspace
#create vector of data
edad <- c(18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 20, 20, 20, 20, 20, 20, 20,
20, 20, 20, 20, 20, 20, 20, 21, 21, 21,
21, 21, 21, 21, 21, 22, 22, 22, 23, 23,
24, 26, 31, 37)
altura <- c(156, 156, 160, 162, 164, 165, 165, 167,
168, 169, 169, 169, 170, 170, 170, 170,
170, 171, 172, 173, 173, 174, 174, 174,
174, 176, 177, 178, 179, 180, 180, 180,
180, 180, 182, 183, 184, 184, 184, 185,
187, 187, 187, 188)
peso <- c(46, 52, 52, 52, 54, 55, 56, 58, 58, 58, 58,
58, 59, 60, 60, 60, 62, 64, 65, 65, 65, 65,
66, 67, 67, 68, 68, 69, 70, 70, 70, 70, 71,
72, 74, 77, 80, 80, 80, 81, 85, 88, 91, 120)
summary(edad)
summary(altura)
summary(peso)
library(lsr)
library(moments)
rm(list=ls()) #clear variables in workspace
#create vector of data
edad <- c(18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 20, 20, 20, 20, 20, 20, 20,
20, 20, 20, 20, 20, 20, 20, 21, 21, 21,
21, 21, 21, 21, 21, 22, 22, 22, 23, 23,
24, 26, 31, 37)
altura <- c(156, 156, 160, 162, 164, 165, 165, 167,
168, 169, 169, 169, 170, 170, 170, 170,
170, 171, 172, 173, 173, 174, 174, 174,
174, 176, 177, 178, 179, 180, 180, 180,
180, 180, 182, 183, 184, 184, 184, 185,
187, 187, 187, 188)
peso <- c(46, 52, 52, 52, 54, 55, 56, 58, 58, 58, 58,
58, 59, 60, 60, 60, 62, 64, 65, 65, 65, 65,
66, 67, 67, 68, 68, 69, 70, 70, 70, 70, 71,
72, 74, 77, 80, 80, 80, 81, 85, 88, 91, 120)
summary(edad)
modeOf(edad)
mean(edad)
mean(altura)
library(lsr)
library(moments)
rm(list=ls()) #clear variables in workspace
#create vector of data
edad <- c(18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 20, 20, 20, 20, 20, 20, 20,
20, 20, 20, 20, 20, 20, 20, 21, 21, 21,
21, 21, 21, 21, 21, 22, 22, 22, 23, 23,
24, 26, 31, 37)
altura <- c(156, 157, 160, 162, 164, 165, 165, 167,
168, 169, 169, 169, 170, 170, 170, 170,
170, 171, 172, 173, 173, 174, 174, 174,
174, 176, 177, 178, 179, 180, 180, 180,
180, 180, 182, 183, 184, 184, 184, 185,
187, 187, 187, 188)
peso <- c(46, 52, 52, 52, 54, 55, 56, 58, 58, 58, 58,
58, 59, 60, 60, 60, 62, 64, 65, 65, 65, 65,
66, 67, 67, 68, 68, 69, 70, 70, 70, 70, 71,
72, 74, 77, 80, 80, 80, 81, 85, 88, 91, 120)
mean(altura)
mean(peso)
median(altura)
median(peso)
modeOf(altura)
modeOf(peso)
install.packages("agicolae")
install.packages("agricolae")
library(lsr)
library(moments)
library(agricolae)
rm(list=ls()) #clear variables in workspace
#create vector of data
edad <- c(18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 20, 20, 20, 20, 20, 20, 20,
20, 20, 20, 20, 20, 20, 20, 21, 21, 21,
21, 21, 21, 21, 21, 22, 22, 22, 23, 23,
24, 26, 31, 37)
altura <- c(156, 157, 160, 162, 164, 165, 165, 167,
168, 169, 169, 169, 170, 170, 170, 170,
170, 171, 172, 173, 173, 174, 174, 174,
174, 176, 177, 178, 179, 180, 180, 180,
180, 180, 182, 183, 184, 184, 184, 185,
187, 187, 187, 188)
peso <- c(46, 52, 52, 52, 54, 55, 56, 58, 58, 58, 58,
58, 59, 60, 60, 60, 62, 64, 65, 65, 65, 65,
66, 67, 67, 68, 68, 69, 70, 70, 70, 70, 71,
72, 74, 77, 80, 80, 80, 81, 85, 88, 91, 120)
library(lsr)
library(moments)
library(agricolae)
rm(list=ls()) #clear variables in workspace
#create vector of data
edad <- c(18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 20, 20, 20, 20, 20, 20, 20,
20, 20, 20, 20, 20, 20, 20, 21, 21, 21,
21, 21, 21, 21, 21, 22, 22, 22, 23, 23,
24, 26, 31, 37)
altura <- c(156, 157, 160, 162, 164, 165, 165, 167,
168, 169, 169, 169, 170, 170, 170, 170,
170, 171, 172, 173, 173, 174, 174, 174,
174, 176, 177, 178, 179, 180, 180, 180,
180, 180, 182, 183, 184, 184, 184, 185,
187, 187, 187, 188)
peso <- c(46, 52, 52, 52, 54, 55, 56, 58, 58, 58, 58,
58, 59, 60, 60, 60, 62, 64, 65, 65, 65, 65,
66, 67, 67, 68, 68, 69, 70, 70, 70, 70, 71,
72, 74, 77, 80, 80, 80, 81, 85, 88, 91, 120)
listaedad = hist(x, plot=FALSE)
library(lsr)
library(moments)
library(agricolae)
rm(list=ls()) #clear variables in workspace
#create vector of data
edad <- c(18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 20, 20, 20, 20, 20, 20, 20,
20, 20, 20, 20, 20, 20, 20, 21, 21, 21,
21, 21, 21, 21, 21, 22, 22, 22, 23, 23,
24, 26, 31, 37)
altura <- c(156, 157, 160, 162, 164, 165, 165, 167,
168, 169, 169, 169, 170, 170, 170, 170,
170, 171, 172, 173, 173, 174, 174, 174,
174, 176, 177, 178, 179, 180, 180, 180,
180, 180, 182, 183, 184, 184, 184, 185,
187, 187, 187, 188)
peso <- c(46, 52, 52, 52, 54, 55, 56, 58, 58, 58, 58,
58, 59, 60, 60, 60, 62, 64, 65, 65, 65, 65,
66, 67, 67, 68, 68, 69, 70, 70, 70, 70, 71,
72, 74, 77, 80, 80, 80, 81, 85, 88, 91, 120)
listaedad = hist(edad, plot=FALSE)
tablaf = table.freq(edad)
library(lsr)
library(moments)
library(agricolae)
rm(list=ls()) #clear variables in workspace
#create vector of data
edad <- c(18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 20, 20, 20, 20, 20, 20, 20,
20, 20, 20, 20, 20, 20, 20, 21, 21, 21,
21, 21, 21, 21, 21, 22, 22, 22, 23, 23,
24, 26, 31, 37)
altura <- c(156, 157, 160, 162, 164, 165, 165, 167,
168, 169, 169, 169, 170, 170, 170, 170,
170, 171, 172, 173, 173, 174, 174, 174,
174, 176, 177, 178, 179, 180, 180, 180,
180, 180, 182, 183, 184, 184, 184, 185,
187, 187, 187, 188)
peso <- c(46, 52, 52, 52, 54, 55, 56, 58, 58, 58, 58,
58, 59, 60, 60, 60, 62, 64, 65, 65, 65, 65,
66, 67, 67, 68, 68, 69, 70, 70, 70, 70, 71,
72, 74, 77, 80, 80, 80, 81, 85, 88, 91, 120)
listaedad = hist(edad, plot=FALSE)
View(listaedad)
tablaf = table.freq(listaedad)
tablaf
library(lsr)
library(moments)
rm(list=ls()) #clear variables in workspace
#create vector of data
edad <- c(18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 20, 20, 20, 20, 20, 20, 20,
20, 20, 20, 20, 20, 20, 20, 21, 21, 21,
21, 21, 21, 21, 21, 22, 22, 22, 23, 23,
24, 26, 31, 37)
altura <- c(156, 157, 160, 162, 164, 165, 165, 167,
168, 169, 169, 169, 170, 170, 170, 170,
170, 171, 172, 173, 173, 174, 174, 174,
174, 176, 177, 178, 179, 180, 180, 180,
180, 180, 182, 183, 184, 184, 184, 185,
187, 187, 187, 188)
peso <- c(46, 52, 52, 52, 54, 55, 56, 58, 58, 58, 58,
58, 59, 60, 60, 60, 62, 64, 65, 65, 65, 65,
66, 67, 67, 68, 68, 69, 70, 70, 70, 70, 71,
72, 74, 77, 80, 80, 80, 81, 85, 88, 91, 120)
rm(list = ls())
2+2
5-4
4*3
20/5
3**2
log(4)
abs(-34)
# Definir el número de lanzamientos del dado
num_lanzamientos <- 1000
# Simular los lanzamientos del dado
resultados <- sample(1:6, num_lanzamientos, replace = TRUE)
# Calcular la media acumulada
media_acumulada <- cumsum(resultados) / seq_along(resultados)
# Graficar la convergencia de la media
plot(1:num_lanzamientos, media_acumulada, type = "l",
xlab = "Número de lanzamientos",
ylab = "Media acumulada",
main = "Convergencia de la media de lanzamientos de un dado")
# Definir el número de lanzamientos del dado
num_lanzamientos <- 1000
# Simular los lanzamientos del dado
resultados <- sample(1:6, num_lanzamientos, replace = TRUE)
# Calcular la media acumulada
media_acumulada <- cumsum(resultados) / seq_along(resultados)
# Graficar la convergencia de la media
plot(1:num_lanzamientos, media_acumulada, type = "l",
xlab = "Número de lanzamientos",
ylab = "Media acumulada",
main = "Convergencia de la media de lanzamientos de un dado")
# Definir la función para obtener el número de lanzamientos para alcanzar un epsilon menor al 1%
obtener_lanzamientos_epsilon <- function() {
epsilon = 0.01  # 1%
valor_esperado = 3.5  # Valor esperado teórico para un dado justo
lanzamientos = 0
media_acumulada = 0
while(TRUE) {
lanzamientos = lanzamientos + 1
resultado = sample(1:6, 1)
media_acumulada = (media_acumulada * (lanzamientos - 1) + resultado) / lanzamientos
if (abs(media_acumulada - valor_esperado) <= epsilon) {
return(lanzamientos)
}
}
}
# Realizar 10000 repeticiones del experimento
num_repeticiones <- 10000
resultados_experimento <- replicate(num_repeticiones, obtener_lanzamientos_epsilon())
# Dibujar el histograma
hist(resultados_experimento,
breaks = 30,
xlab = "Número de lanzamientos hasta alcanzar epsilon < 1%",
main = "Histograma de repeticiones para alcanzar epsilon < 1%")
# Dibujar el histograma
hist(resultados_experimento,
breaks = 30,
xlab = "Número de lanzamientos hasta alcanzar epsilon < 1%",
main = "Histograma de repeticiones para alcanzar epsilon < 1%")
num_lanzamientos <- 1000
resultados <- sample(1:6, num_lanzamientos, replace = TRUE)
media_acumulada <- cumsum(resultados) / seq_along(resultados)
plot(1:num_lanzamientos, media_acumulada, type = "l",
xlab = "Número de lanzamientos",
ylab = "Media acumulada",
main = "Convergencia de la media de lanzamientos de un dado")
obtener_lanzamientos_epsilon <- function() {
epsilon = 0.01  # 1%
valor_esperado = 3.5  # Valor esperado teórico para un dado justo
lanzamientos = 0
media_acumulada = 0
while(TRUE) {
lanzamientos = lanzamientos + 1
resultado = sample(1:6, 1)
media_acumulada = (media_acumulada * (lanzamientos - 1) + resultado) / lanzamientos
if (abs(media_acumulada - valor_esperado) <= epsilon) {
return(lanzamientos)
}
}
}
num_repeticiones <- 10000
resultados_experimento <- replicate(num_repeticiones, obtener_lanzamientos_epsilon())
hist(resultados_experimento,
breaks = 30,
xlab = "Número de lanzamientos hasta alcanzar epsilon < 1%",
main = "Histograma de repeticiones para alcanzar epsilon < 1%")
# Definir la función para obtener el número de lanzamientos para alcanzar un epsilon menor al 0.1%
obtener_lanzamientos_epsilon <- function() {
epsilon = 0.001  # 0.1%
valor_esperado = 3.5  # Valor esperado teórico para un dado justo
lanzamientos = 0
media_acumulada = 0
while(TRUE) {
lanzamientos = lanzamientos + 1
resultado = sample(1:6, 1)
media_acumulada = (media_acumulada * (lanzamientos - 1) + resultado) / lanzamientos
if (abs(media_acumulada - valor_esperado) <= epsilon) {
return(lanzamientos)
}
}
}
# Realizar 10000 repeticiones del experimento
num_repeticiones <- 10000
resultados_experimento <- replicate(num_repeticiones, obtener_lanzamientos_epsilon())
# Calcular el promedio de lanzamientos necesarios
promedio_lanzamientos <- mean(resultados_experimento)
# Mostrar el resultado del promedio de lanzamientos necesarios
print(paste("El número promedio de lanzamientos necesarios para alcanzar epsilon < 0.1% es:", promedio_lanzamientos))
# Mostrar el resultado del promedio de lanzamientos necesarios
print(paste("El número promedio de lanzamientos necesarios para alcanzar epsilon < 0.1% es:", promedio_lanzamientos))
num_lanzamientos <- 1000
resultados <- sample(1:6, num_lanzamientos, replace = TRUE)
media_acumulada <- cumsum(resultados) / seq_along(resultados)
plot(1:num_lanzamientos, media_acumulada, type = "l",
xlab = "Número de lanzamientos",
ylab = "Media acumulada",
main = "Convergencia de la media de lanzamientos de un dado")
obtener_lanzamientos_epsilon <- function() {
epsilon = 0.01  # 1%
valor_esperado = 3.5  # Valor esperado teórico para un dado justo
lanzamientos = 0
media_acumulada = 0
while(TRUE) {
lanzamientos = lanzamientos + 1
resultado = sample(1:6, 1)
media_acumulada = (media_acumulada * (lanzamientos - 1) + resultado) / lanzamientos
if (abs(media_acumulada - valor_esperado) <= epsilon) {
return(lanzamientos)
}
}
}
num_repeticiones <- 10000
resultados_experimento <- replicate(num_repeticiones, obtener_lanzamientos_epsilon())
hist(resultados_experimento,
breaks = 30,
xlab = "Número de lanzamientos hasta alcanzar epsilon < 1%",
main = "Histograma de repeticiones para alcanzar epsilon < 1%")
# Definir la función para obtener el número de lanzamientos para alcanzar un epsilon menor al 0.1%
obtener_lanzamientos_epsilon <- function() {
epsilon = 0.001  # 0.1%
valor_esperado = 3.5  # Valor esperado teórico para un dado justo
lanzamientos = 0
media_acumulada = 0
while(TRUE) {
lanzamientos = lanzamientos + 1
resultado = sample(1:6, 1)
media_acumulada = (media_acumulada * (lanzamientos - 1) + resultado) / lanzamientos
if (abs(media_acumulada - valor_esperado) <= epsilon) {
return(lanzamientos)
}
}
}
# Realizar 10000 repeticiones del experimento
num_repeticiones <- 10000
resultados_experimento <- replicate(num_repeticiones, obtener_lanzamientos_epsilon())
num_lanzamientos <- 1000
resultados <- sample(1:6, num_lanzamientos, replace = TRUE)
media_acumulada <- cumsum(resultados) / seq_along(resultados)
plot(1:num_lanzamientos, media_acumulada, type = "l",
xlab = "lanzamientos",
ylab = "Media acumulada"
library(readxl)
library(tidyverse)
library(writexl)
estudiantesDesplazados <- read_excel("ESTUDIANTES_EN_SITUACI_N_DE_DESPLAZAMIENTO_EN_SANTANDER.xlsx")
head(estudiantesDesplazados) # para ver mas valores: head(aux, 10)
tail(estudiantesDesplazados)
View(estudiantesDesplazados)
names(estudiantesDesplazados)
class(estudiantesDesplazados$d_muni)
length(estudiantesDesplazados$d_ano)
library(readxl)
library(tidyverse)
library(writexl)
estudiantesDesplazados <- read_excel("ESTUDIANTES_EN_SITUACI_N_DE_DESPLAZAMIENTO_EN_SANTANDER.xlsx")
setwd("C:/CreepstyC/University/7th/statisticsI/Estudiantes_en_situacion_de_desplazamiento_en_Santander")
estudiantesDesplazados <- read_excel("ESTUDIANTES_EN_SITUACI_N_DE_DESPLAZAMIENTO_EN_SANTANDER.xlsx")
head(estudiantesDesplazados) # para ver mas valores: head(aux, 10)
tail(estudiantesDesplazados)
View(estudiantesDesplazados)
names(estudiantesDesplazados)
class(estudiantesDesplazados$d_muni)
length(estudiantesDesplazados$d_ano)
unique(estudiantesDesplazados$d_provincia)
is.na(estudiantesDesplazados)
sum(is.na(estudiantesDesplazados))
summary(estudiantesDesplazados)
library(skimr)
skim(estudiantesDesplazados)
datatable(head(estudiantesDesplazados), options = list(scrollX = '300px', paging = FALSE, searching=FALSE))
library(skimr)  #resúmenes estadísticos para marcos de datos
library(DT) #presentación de tablas y conjuntos de datos
library(knitr)  #generación dinámica de reportes
library(kableExtra) #manipulación y creación de tablas
library(dplyr) #manipulación y creación de tablas
estudiantesDesplazados <- read_excel("ESTUDIANTES_EN_SITUACI_N_DE_DESPLAZAMIENTO_EN_SANTANDER.xlsx")
datatable(head(estudiantesDesplazados), options = list(scrollX = '300px', paging = FALSE, searching=FALSE))
variables <- c("d_ano", "d_muni", "d_nombmuni", "d_provincia", "d_nomsec" , "d_nomzon", "dane_ant", "d_nombinst", "d_sede", "d_nombsede", "d_nomjor", "d_grado", "d_edad", "d_genero", "d_hombres", "d_mujeres", "d_tipo", "metodo", "sector", "etnia", "discapa")
descripciones <- c("Año del registro", "ID del municipio en el que se encuentra", "Nombre del municipio en el que se encuentra", "Nombre de la provincia en la que está ubicado", "Tipo de sector en el que se encuentra", "Tipo de zona en la que se encuentra", "Código de ubicación geográfica de la institución", "Nombre de la institución en la cual está estudiando", "ID de la sede en la que se encuentra", "Nombre de la sede en la que está", "Jornada a la que asiste el estudiante", "Grado que cursa", "Edad del estudiante", "Género en formato de tipo caracter", "Género en formato binario con 1 para masculino y 0 para femenino", "Género en formato binario con 0 para masculino y 1 para femenino", "Razón o tipo de desplazamiento", "Método por el cuál se brinda la educación", "Sector al que pertenece", "Etnia a la que pertenece el estudiante", "Discapacidad presente en el estudiante")
datosVariables <- data.frame(Variable = variables, Descripcion = descripciones)
kable(datosVariables, "html") %>%
kable_styling() %>%
column_spec(1, bold = TRUE)
estudiantesDesplazados_clean <- estudiantesDesplazados %>%
apply(2, function(x) gsub("[[:punct:]]", "", x)) %>%
as_tibble(.) %>%
select(-d_edad, -d_genero, -d_mujeres, -d_ano) %>%
mutate(d_sede = str_sub(d_sede, -1)) %>%
rename(ID_Municipio = d_muni, NombreMunicipio = d_nombmuni, Provincia = d_provincia, NombreSector = d_nomsec, Zona = d_nomzon, CódigoGeográfico = dane_ant, NombreInstitucion = d_nombinst, Sede = d_sede, NombreSede = d_nombsede, Jornada = d_nomjor, Grado = d_grado, Género = d_hombres, TipoDeDesplazamiento = d_tipo, MetodoEducación = metodo, Sector = sector, Edad = edad, Etnia = etnia, Discapacidad = discapa)
estudiantesDesplazados_clean <- estudiantesDesplazados_clean %>%
mutate(ID_Municipio = as.numeric(ID_Municipio), CódigoGeográfico = as.numeric(CódigoGeográfico), Grado = as.numeric(Grado), Género = as.numeric(Género), Sector = as.numeric(Sector), Edad = as.numeric(Edad))
datatable(head(estudiantesDesplazados_clean), options = list(scrollX = '300px', paging = FALSE, searching=FALSE))
library(skimr)
skim(estudiantesDesplazados)
estudiantesDesplazados %>%
dplyr::group_by(d_provincia) %>%
skim()
glimpse(estudiantesDesplazados)
dim(estudiantesDesplazados)
#frecuencia de aparición
tabledata <- table(estudiantesDesplazados$d_provincia)
barplot(tabledata, horiz = FALSE, las = 2)
pie(tabledata)
hist(estudiantesDesplazados$edad)
plot(estudiantesDesplazados$edad, estudiantesDesplazados$d_grado, xlim = c(1,70), ylim = c(0,30))
plot(estudiantesDesplazados$edad, estudiantesDesplazados$d_grado, xlim = c(1,70), ylim = c(0,30))
hist(estudiantesDesplazados$edad)
summary(estudiantesDesplazados)
hist(estudiantesDesplazados$edad)
plot(estudiantesDesplazados$edad, estudiantesDesplazados$d_grado, xlim = c(1,70), ylim = c(0,30))
plot(estudiantesDesplazados$edad, estudiantesDesplazados$d_grado, xlim = c(0,70), ylim = c(-2,30))
View(estudiantesDesplazados_clean)
estudiantesDesplazados %>%
dplyr::group_by(d_provincia) %>%
skim()
glimpse(estudiantesDesplazados)
dim(estudiantesDesplazados)
#frecuencia de aparición
tabledata <- table(estudiantesDesplazados$d_provincia)
barplot(tabledata, horiz = FALSE, las = 2)
pie(tabledata)
hist(estudiantesDesplazados$edad)
plot(estudiantesDesplazados$edad, estudiantesDesplazados$d_grado, xlim = c(0,70), ylim = c(-2,30))
